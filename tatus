warning: in the working copy of 'src/tools/localTools/astGrep.ts', LF will be replaced by CRLF the next time Git touches it
[1mdiff --git a/src/tools/localTools/astGrep.ts b/src/tools/localTools/astGrep.ts[m
[1mindex 6b513d7..6bdcccb 100644[m
[1m--- a/src/tools/localTools/astGrep.ts[m
[1m+++ b/src/tools/localTools/astGrep.ts[m
[36m@@ -55,8 +55,10 @@[m [mUnlike text-based search, this matches syntactical AST node structures.[m
 - Multi-language support (JS, TS, Python, Go, Rust, etc.)[m
 - Wildcard variables ($VAR, $FUNC, $ARGS)[m
 - Precise code location information[m
[31m-- Fast Rust-based execution[m
[32m+[m[32m- Fast Rust-based execution with performance optimizations[m
 - Comprehensive pattern validation with helpful error messages[m
[32m+[m[32m- 120-second timeout for very large projects[m
[32m+[m[32m- Automatic respect for .gitignore files (no manual exclusions needed)[m
 [m
 **Pattern Syntax:**[m
 - Use $ + UPPERCASE for wildcards: $FUNC, $VAR, $ARGS[m
[36m@@ -76,7 +78,8 @@[m [mUnlike text-based search, this matches syntactical AST node structures.[m
 - 'export const $NAME = $VALUE' (exported constant)[m
 - 'import $NAME from "$MODULE"' (import statement)[m
 - 'new $CLASS($ARGS)' (constructor call)[m
[31m-- 'class $NAME: $BODY' (Python class)[m
[32m+[m[32m- 'def ' (Python function definitions)[m
[32m+[m[32m- 'class $NAME:' (Python class)[m
 - 'await $PROMISE' inside 'for ($COND) { $BODY }' (relational patterns)[m
 [m
 **Examples:**[m
[36m@@ -88,14 +91,37 @@[m [mUnlike text-based search, this matches syntactical AST node structures.[m
 - Find async functions: 'async function $NAME($ARGS) { $BODY }'[m
 - Find arrow functions: 'const $NAME = ($ARGS) => $BODY'[m
 - Find React components: 'export function $NAME($PROPS) { return $JSX }'[m
[31m-- Find Python classes: 'class $NAME: $BODY'[m
[31m-- Find Python classes with inheritance: 'class $NAME($BASE): $BODY'[m
[32m+[m[32m- Find Python function definitions: 'def '[m
[32m+[m[32m- Find Python classes: 'class $NAME:'[m
 [m
 **Advanced Usage:**[m
 - Use $$$ for zero or more arguments: 'console.log($$$ARGS)'[m
 - Use relational rules: 'await $PROMISE' inside 'for ($COND) { $BODY }'[m
 - Use multiple searches for OR conditions (alternation not supported)[m
 [m
[32m+[m[32m**Direct CLI Usage (for agents with command line access):**[m
[32m+[m[32mAgents with command line access can run ast-grep directly:[m
[32m+[m
[32m+[m[32m# Basic usage[m
[32m+[m[32mnpx ast-grep --pattern "function $NAME($ARGS) { $BODY }" --lang ts[m
[32m+[m
[32m+[m[32m# Python function definitions[m
[32m+[m[32mnpx ast-grep --pattern "def " --lang py[m
[32m+[m
[32m+[m[32m# Python classes[m
[32m+[m[32mnpx ast-grep --pattern "class $NAME:" --lang py[m
[32m+[m
[32m+[m[32m# With file filtering (recommended for large projects)[m
[32m+[m[32mnpx ast-grep --pattern "def " --lang py src/**/*.py[m
[32m+[m
[32m+[m[32m# JSON output[m
[32m+[m[32mnpx ast-grep --pattern "class $NAME:" --lang py --json=stream[m
[32m+[m
[32m+[m[32m# Full documentation[m
[32m+[m[32mnpx ast-grep --help[m
[32m+[m
[32m+[m[32m# Note: ast-grep respects .gitignore files automatically - no --exclude-dir flags needed[m
[32m+[m
 **Use Cases:**[m
 - Code refactoring and migration[m
 - Finding specific patterns across codebase[m
[36m@@ -104,13 +130,16 @@[m [mUnlike text-based search, this matches syntactical AST node structures.[m
 - Finding unused imports or exports[m
 - API usage analysis[m
 [m
[31m-**Automatic Exclusions:**[m
[31m-By default, excludes common non-source directories:[m
[31m-- node_modules/, .git/, dist/, build/[m
[31m-- IDE folders (.vscode/, .idea/)[m
[31m-- Generated files (*.min.js, *.map)[m
[31m-- Respects .gitignore and other ignore files`,[m
[32m+[m[32m**Performance Optimizations for Large Projects:**[m
[32m+[m[32m- 120-second timeout for very large projects[m
[32m+[m[32m- Automatically respects .gitignore files for exclusions[m
[32m+[m[32m- For additional exclusions, configure .gitignore in your project[m
 [m
[32m+[m[32m**Tips for Large Projects (like D:\Dev\SWE-agent):**[m
[32m+[m[32m- Use filePattern to search specific directories: "src/**/*.py"[m
[32m+[m[32m- Add large directories to .gitignore: node_modules/, tests/, docs/, etc.[m
[32m+[m[32m- Consider CLI usage for better performance: npx ast-grep --pattern "import json" --lang py src/**/*.py[m
[32m+[m[32m`,[m
   inputSchema: {[m
     type: 'object',[m
     properties: {[m
[36m@@ -148,7 +177,7 @@[m [mBy default, excludes common non-source directories:[m
       filePattern: {[m
         type: 'string',[m
         description:[m
[31m-          'Specific directory or file path to search within the project (e.g., "src", "lib"). If not provided, searches entire project.',[m
[32m+[m[32m          'Specific directory or file path to search within the project (e.g., "src", "lib", "*.py", "src/**/*.ts"). **RECOMMENDED for large projects** - if not provided, searches entire project respecting .gitignore. Use wildcards like "src/**/*.py" to search recursively in specific directories. This can dramatically improve performance on large codebases.',[m
       },[m
       maxMatches: {[m
         type: 'number',[m
[36m@@ -200,14 +229,14 @@[m [mexport function validateAstGrepPattern(pattern: string): PatternValidationResult[m
     return {[m
       isValid: false,[m
       error:[m
[31m-        'Pattern cannot be empty. Use valid TypeScript/JavaScript syntax like "function $NAME($ARGS) { $BODY }"',[m
[32m+[m[32m        'Pattern cannot be empty. Use valid patterns like "function $NAME($ARGS) { $BODY }" or "def " for Python functions',[m
       suggestions: [[m
         'function $NAME($ARGS) { $BODY }',[m
         'import $NAME from "$MODULE"',[m
         'new $CLASS($ARGS)',[m
         'const $VAR = $VALUE',[m
[31m-        'class $NAME: $BODY (Python)',[m
[31m-        'class $NAME($BASE): $BODY (Python with inheritance)',[m
[32m+[m[32m        'def  (Python function definitions)',[m
[32m+[m[32m        'class $NAME: (Python classes)',[m
       ],[m
     };[m
   }[m
[36m@@ -253,6 +282,22 @@[m [mexport function validateAstGrepPattern(pattern: string): PatternValidationResult[m
     };[m
   }[m
 [m
[32m+[m[32m  // Check for problematic Python patterns that don't work in ast-grep[m
[32m+[m[32m  if ([m
[32m+[m[32m    trimmedPattern.includes('def $NAME($ARGS):') ||[m
[32m+[m[32m    trimmedPattern.includes('def $name($args):') ||[m
[32m+[m[32m    (trimmedPattern.startsWith('def ') && trimmedPattern.includes('$') && trimmedPattern.includes(':'))[m
[32m+[m[32m  ) {[m
[32m+[m[32m    return {[m
[32m+[m[32m      isValid: false,[m
[32m+[m[32m      error: 'Complex Python function definition patterns with metavariables may not work correctly in ast-grep',[m
[32m+[m[32m      suggestions: [[m
[32m+[m[32m        'Use simple patterns: "def " for function definitions',[m
[32m+[m[32m        'Example: "def " instead of "def $NAME($ARGS):"',[m
[32m+[m[32m      ],[m
[32m+[m[32m    };[m
[32m+[m[32m  }[m
[32m+[m
   // Regex escape sequences check[m
   if (/\\([(){}\[\].+?^$])/g.test(trimmedPattern)) {[m
     return {[m
[36m@@ -291,7 +336,7 @@[m [mexport function validateAstGrepPattern(pattern: string): PatternValidationResult[m
     if (ambiguousPattern.test(trimmedPattern)) {[m
       return {[m
         isValid: false,[m
[31m-        error: `Pattern "${trimmedPattern}" is ambiguous and cannot be parsed by ast-grep`,[m
[32m+[m[32m        error: 'Pattern "' + trimmedPattern + '" is ambiguous and cannot be parsed by ast-grep',[m
         suggestions: [[m
           'Add more context to make the pattern unambiguous',[m
           'Example: "export const $NAME = $VALUE" instead of "export $TYPE"',[m
[36m@@ -312,7 +357,7 @@[m [mexport function validateAstGrepPattern(pattern: string): PatternValidationResult[m
   let warning: string | undefined;[m
   for (const genericPattern of tooGenericPatterns) {[m
     if (genericPattern.test(trimmedPattern)) {[m
[31m-      warning = `Pattern "${trimmedPattern}" is very generic and may not match expected code structures`;[m
[32m+[m[32m      warning = 'Pattern "' + trimmedPattern + '" is very generic and may not match expected code structures';[m
       break;[m
     }[m
   }[m
[36m@@ -360,7 +405,7 @@[m [mexport async function handleAstGrep(args: any): Promise<AstGrepResult> {[m
     if (!validation.isValid) {[m
       const errorMessage = validation.error || 'Invalid AST pattern';[m
       const suggestions = validation.suggestions || [];[m
[31m-      const fullMessage = `${errorMessage}${suggestions.length > 0 ? '\n\nSuggestions:\n' + suggestions.map(s => `â€¢ ${s}`).join('\n') : ''}`;[m
[32m+[m[32m      const fullMessage = errorMessage + (suggestions.length > 0 ? '\n\nSuggestions:\n' + suggestions.map(s => 'â€¢ ' + s).join('\n') : '');[m
       throw new Error(fullMessage);[m
     }[m
 [m
[36m@@ -461,9 +506,17 @@[m [mexport async function executeAstGrep(options: {[m
         pattern: options.pattern,[m
         patternType: typeof options.pattern,[m
         patternLength: options.pattern.length,[m
[31m-        patternTrimmed: options.pattern.trim(),[m
       });[m
 [m
[32m+[m[32m      // Double-check the pattern before adding to args[m
[32m+[m[32m      if (!options.pattern || options.pattern.trim() === '') {[m
[32m+[m[32m        throw new Error('Pattern is empty or undefined');[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      logger.debug('Adding pattern to ast-grep arguments', {[m
[32m+[m[32m        pattern: options.pattern,[m
[32m+[m[32m        patternLength: options.pattern.length[m
[32m+[m[32m      });[m
       cliArgs.push('--pattern', options.pattern);[m
 [m
       if (options.language) {[m
[36m@@ -483,22 +536,52 @@[m [mexport async function executeAstGrep(options: {[m
       if (options.filePattern) {[m
         cliArgs.push(options.filePattern);[m
       } else {[m
[32m+[m[32m        // Note: ast-grep respects .gitignore files by default, which provides most exclusions[m
[32m+[m[32m        // For additional exclusions, users should configure .gitignore in their project[m
         cliArgs.push('.');[m
[32m+[m[32m        logger.debug('Using default .gitignore-based exclusions (ast-grep does not support --exclude-dir flags)');[m
       }[m
 [m
[31m-      logger.debug('Executing ast-grep command', {[m
[32m+[m[32m      logger.info('Executing ast-grep search', {[m
[32m+[m[32m        pattern: options.pattern,[m
[32m+[m[32m        language: options.language,[m
[32m+[m[32m        projectPath: options.projectPath,[m
[32m+[m[32m        maxMatches: options.maxMatches,[m
[32m+[m[32m        filePattern: options.filePattern || 'all files (with exclusions)',[m
[32m+[m[32m        cwd: options.projectPath,[m
[32m+[m[32m      });[m
[32m+[m
[32m+[m[32m      // Debug: Check if project path exists and is accessible[m
[32m+[m[32m      try {[m
[32m+[m[32m        const fs = require('fs');[m
[32m+[m[32m        const path = require('path');[m
[32m+[m[32m        const stats = fs.statSync(options.projectPath);[m
[32m+[m[32m        logger.debug('Project path exists', {[m
[32m+[m[32m          path: options.projectPath,[m
[32m+[m[32m          isDirectory: stats.isDirectory(),[m
[32m+[m[32m          readable: true,[m
[32m+[m[32m          size: stats.size[m
[32m+[m[32m        });[m
[32m+[m[32m      } catch (error) {[m
[32m+[m[32m        logger.error('Project path does not exist or is not accessible', {[m
[32m+[m[32m          path: options.projectPath,[m
[32m+[m[32m          error: error instanceof Error ? error.message : String(error)[m
[32m+[m[32m        });[m
[32m+[m[32m        throw new Error('Project path does not exist or is not accessible: ' + options.projectPath);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      logger.debug('ast-grep command details', {[m
         command: 'npx ast-grep',[m
         args: cliArgs,[m
[31m-        argsJoined: cliArgs.join(' '),[m
         cwd: options.projectPath,[m
[31m-        pattern: options.pattern,[m
[31m-        language: options.language,[m
[32m+[m[32m        fullCommand: 'npx ast-grep ' + cliArgs.join(' '),[m
       });[m
 [m
       // Log the command being executed[m
[31m-      const fullCommand = `npx ast-grep ${cliArgs.join(' ')}`;[m
[32m+[m[32m      const fullCommand = 'npx ast-grep ' + cliArgs.join(' ');[m
       logger.debug('Executing ast-grep command:', { command: fullCommand });[m
 [m
[32m+[m
       let astGrep: ReturnType<typeof spawn> | null = null;[m
       let executionMethod = 'unknown';[m
 [m
[36m@@ -538,10 +621,10 @@[m [mexport async function executeAstGrep(options: {[m
             options: { shell: false },[m
           },[m
           {[m
[31m-            name: 'shell-cmd-npx',[m
[31m-            command: 'cmd /c "npx ast-grep ' + cliArgs.join(' ') + '"',[m
[31m-            args: [],[m
[31m-            options: { shell: true },[m
[32m+[m[32m            name: 'direct-npx',[m
[32m+[m[32m            command: 'npx',[m
[32m+[m[32m            args: ['ast-grep', ...cliArgs],[m
[32m+[m[32m            options: { shell: false },[m
           },[m
         ] as const;[m
 [m
[36m@@ -554,15 +637,13 @@[m [mexport async function executeAstGrep(options: {[m
               command: approach.command,[m
               args: approach.args,[m
               cwd: options.projectPath,[m
[31m-              platform: process.platform,[m
[31m-              shell: approach.options.shell,[m
[31m-              fullCommand:[m
[31m-                approach.command + ' ' + (approach.args.length > 0 ? approach.args.join(' ') : ''),[m
[32m+[m[32m              pattern: options.pattern,[m
[32m+[m[32m              language: options.language,[m
             });[m
 [m
             astGrep = spawn(approach.command, approach.args, {[m
               cwd: options.projectPath,[m
[31m-              stdio: ['ignore', 'pipe', 'pipe'],[m
[32m+[m[32m              stdio: ['pipe', 'pipe', 'pipe'], // Change to pipe all streams for debugging[m
               ...approach.options,[m
               env: process.env,[m
             });[m
[36m@@ -589,7 +670,7 @@[m [mexport async function executeAstGrep(options: {[m
             cwd: options.projectPath,[m
             nodeVersion: process.version,[m
           });[m
[31m-          throw new Error(`All spawn approaches failed: ${lastError?.message || 'Unknown error'}`);[m
[32m+[m[32m          throw new Error('All spawn approaches failed: ' + (lastError?.message || 'Unknown error'));[m
         }[m
       }[m
 [m
[36m@@ -605,20 +686,25 @@[m [mexport async function executeAstGrep(options: {[m
       });[m
 [m
       astGrep.stderr?.on('data', data => {[m
[31m-        stderr += data.toString();[m
[32m+[m[32m        const chunk = data.toString();[m
[32m+[m[32m        stderr += chunk;[m
[32m+[m[32m        // Only log stderr chunks that contain actual error information[m
[32m+[m[32m        if (chunk.includes('SyntaxError') || chunk.includes('Error') || chunk.includes('error')) {[m
[32m+[m[32m          logger.debug('ast-grep stderr:', chunk.substring(0, 200));[m
[32m+[m[32m        }[m
       });[m
 [m
       astGrep.on('close', code => {[m
[32m+[m[32m        clearInterval(activityInterval);[m
         logger.debug('ast-grep process closed', {[m
           code,[m
[31m-          stdoutLength: stdout.length,[m
[31m-          stderrLength: stderr.length,[m
           executionMethod,[m
           success: code === 0,[m
[32m+[m[32m          executionTime: Date.now() - startTime,[m
         });[m
 [m
         if (code !== 0 && code !== null) {[m
[31m-          reject(new Error(`ast-grep exited with code ${code}: ${stderr || 'No error message provided'}`));[m
[32m+[m[32m          reject(new Error('ast-grep exited with code ' + code + ': ' + (stderr || 'No error message provided')));[m
           return;[m
         }[m
 [m
[36m@@ -642,15 +728,56 @@[m [mexport async function executeAstGrep(options: {[m
         } catch (parseError) {[m
           reject([m
             new Error([m
[31m-              `Failed to parse ast-grep output: ${[m
[31m-                parseError instanceof Error ? parseError.message : String(parseError)[m
[31m-              }`[m
[32m+[m[32m            'Failed to parse ast-grep output: ' +[m
[32m+[m[32m              (parseError instanceof Error ? parseError.message : String(parseError))[m
             )[m
           );[m
         }[m
       });[m
 [m
[32m+[m[32m      // Add debugging for process activity[m
[32m+[m[32m      let lastActivity = Date.now();[m
[32m+[m[32m      const activityInterval = setInterval(() => {[m
[32m+[m[32m        const now = Date.now();[m
[32m+[m[32m        const timeSinceLastActivity = now - lastActivity;[m
[32m+[m[32m        if (timeSinceLastActivity > 5000) { // Log every 5 seconds of inactivity[m
[32m+[m[32m          logger.debug('ast-grep process still running', {[m
[32m+[m[32m            executionTime: now - startTime,[m
[32m+[m[32m            timeSinceLastActivity,[m
[32m+[m[32m            executionMethod,[m
[32m+[m[32m            cwd: options.projectPath[m
[32m+[m[32m          });[m
[32m+[m[32m        }[m
[32m+[m[32m      }, 5000);[m
[32m+[m
[32m+[m[32m      astGrep.stdout?.on('data', (data: Buffer) => {[m
[32m+[m[32m        lastActivity = Date.now();[m
[32m+[m[32m        const chunk = data.toString();[m
[32m+[m[32m        stdout += chunk;[m
[32m+[m[32m        if (chunk.includes('\n')) {[m
[32m+[m[32m          logger.debug('ast-grep stdout chunk', {[m
[32m+[m[32m            chunkLength: chunk.length,[m
[32m+[m[32m            totalStdoutLength: stdout.length,[m
[32m+[m[32m            executionTime: Date.now() - startTime[m
[32m+[m[32m          });[m
[32m+[m[32m        }[m
[32m+[m[32m      });[m
[32m+[m
[32m+[m[32m      astGrep.stderr?.on('data', (data: Buffer) => {[m
[32m+[m[32m        lastActivity = Date.now();[m
[32m+[m[32m        const chunk = data.toString();[m
[32m+[m[32m        stderr += chunk;[m
[32m+[m[32m        if (chunk.includes('\n')) {[m
[32m+[m[32m          logger.debug('ast-grep stderr chunk', {[m
[32m+[m[32m            chunkLength: chunk.length,[m
[32m+[m[32m            totalStderrLength: stderr.length,[m
[32m+[m[32m            executionTime: Date.now() - startTime[m
[32m+[m[32m          });[m
[32m+[m[32m        }[m
[32m+[m[32m      });[m
[32m+[m
       astGrep.on('error', processError => {[m
[32m+[m[32m        clearInterval(activityInterval);[m
         logger.error('ast-grep process error', {[m
           error: processError.message,[m
           code: (processError as any).code,[m
[36m@@ -663,16 +790,17 @@[m [mexport async function executeAstGrep(options: {[m
         });[m
         reject([m
           new Error([m
[31m-            `Failed to spawn ast-grep (${executionMethod}): ${processError.message} (code: ${(processError as any).code}). Make sure @ast-grep/cli is installed and accessible.`[m
[32m+[m[32m            'Failed to spawn ast-grep (' + executionMethod + '): ' + processError.message + ' (code: ' + (processError as any).code + '). Make sure @ast-grep/cli is installed and accessible.'[m
           )[m
         );[m
       });[m
 [m
       setTimeout(() => {[m
[32m+[m[32m        clearInterval(activityInterval);[m
         if (astGrep) {[m
           astGrep.kill();[m
         }[m
[31m-        reject(new Error('ast-grep search timed out after 30 seconds'));[m
[32m+[m[32m        reject(new Error('ast-grep search timed out after 30 seconds. For large projects, consider using filePattern to search specific directories (e.g., "src/**/*.py") or excludePatterns to exclude large directories.'));[m
       }, 30000);[m
     } catch (error) {[m
       logger.error('Failed to execute ast-grep', {[m
[36m@@ -682,7 +810,7 @@[m [mexport async function executeAstGrep(options: {[m
       });[m
       reject([m
         new Error([m
[31m-          `Failed to execute ast-grep: ${error instanceof Error ? error.message : String(error)}`[m
[32m+[m[32m          'Failed to execute ast-grep: ' + (error instanceof Error ? error.message : String(error))[m
         )[m
       );[m
     }[m
[36m@@ -764,7 +892,7 @@[m [mfunction filterMatchesByExcludePatterns([m
 [m
     return !excludePatterns.some(pattern => {[m
       const regex = pattern.replace(/\*\*/g, '.*').replace(/\*/g, '[^/]*').replace(/\?/g, '.');[m
[31m-      return new RegExp(`^${regex}$`).test(relativePath);[m
[32m+[m[32m      return new RegExp('^' + regex + '$').test(relativePath);[m
     });[m
   });[m
 [m
[36m@@ -879,7 +1007,7 @@[m [mfunction findLocalAstGrepBinary(): string | null {[m
 [m
     for (const binDir of possibleLocations) {[m
       for (const ext of extensions) {[m
[31m-        const exe = `ast-grep${ext}`;[m
[32m+[m[32m        const exe = 'ast-grep' + ext;[m
         const full = path.join(binDir, exe);[m
         if (require('fs').existsSync(full)) {[m
           logger.debug('Found local ast-grep binary', { path: full });[m
[36m@@ -904,9 +1032,9 @@[m [mfunction buildShellCommand(cmd: string, args: string[]): string {[m
     if (s === '.') return s;[m
     // Simple quoting; sufficient for our arg shapes (no newlines)[m
     if (process.platform === 'win32') {[m
[31m-      return `"${s.replace(/"/g, '\\"')}"`;[m
[32m+[m[32m      return '"' + s.replace(/"/g, '\\"') + '"';[m
     }[m
[31m-    return `'${s.replace(/'/g, "'\\''")}'`;[m
[32m+[m[32m    return "'" + s.replace(/'/g, "'\\''") + "'";[m
   };[m
[31m-  return `${cmd} ${args.map(a => (a.startsWith('--') ? a : quote(a))).join(' ')}`.trim();[m
[32m+[m[32m  return cmd + ' ' + args.map(a => (a.startsWith('--') ? a : quote(a))).join(' ');[m
 }[m
